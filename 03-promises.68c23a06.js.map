{"mappings":"siBAGA,MAAMA,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAuB3C,SAASI,GAAuBC,SAAEA,EAAQC,MAAEA,IAC1CC,EAAAC,GAASC,OAAOC,QAAQ,qBAAqBL,QAAeC,M,CAG9D,SAASK,GAAqBN,SAAEA,EAAQC,MAAEA,IACxCC,EAAAC,GAASC,OAAOG,QAAQ,oBAAoBP,QAAeC,M,CA1B7DR,EAAKe,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAIC,iBAEJ,IAAIV,EAAW,EACf,MAAMC,EAAQU,OAAOf,EAAWgB,OAC1BC,EAAOF,OAAOd,EAAUe,OACxBE,EAASH,OAAOb,EAAYc,OAClC,GAAc,IAAXE,EAAc,OACjB,IAAIC,EAAWd,EAEf,MAAMe,EAAUC,aAAY,KAC1BC,EAAclB,EAAUe,GAAUI,KAAKpB,GAAwBqB,MAAMd,GAClEN,IAAac,GAAQO,cAAcL,GACtCD,GAAYF,EACZb,GAAU,GACTa,E,IAYL,MAAMK,EAAgB,CAAClB,EAAUC,IACxB,IAAIqB,SAAQ,CAACC,EAASC,KAC3B,MAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,KACLH,EACFF,EAAQ,C,SAACvB,E,MAAUC,IAEnBuB,EAAO,C,SAACxB,E,MAAUC,GAAO,GAE1BA,EAAM","sources":["src/js/03-promises.js"],"sourcesContent":["import \"notiflix/dist/notiflix-3.2.5.min.css\";\nimport Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\n\nform.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\n  let position = 1;\n  const delay = Number(delayInput.value);\n  const step = Number(stepInput.value); \n  const amount = Number(amountInput.value);\n  if(amount === 0) return;\n  let timeline = delay;\n\n  const counter = setInterval(() => {\n    createPromise(position, timeline).then(onCreatePromiseSuccess).catch(onCreatePromiseError);\n    if(position === amount) clearInterval(counter);\n    timeline += step;\n    position++;\n  }, step);\n\n};\n\nfunction onCreatePromiseSuccess({ position, delay }) {\n  Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n}\n\nfunction onCreatePromiseError({ position, delay }) {\n  Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n}\n\nconst createPromise = (position, delay) => {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay});\n      }\n    }, delay)\n  });\n}\n\n\n\n"],"names":["$47d4ff9957288465$var$form","document","querySelector","$47d4ff9957288465$var$delayInput","$47d4ff9957288465$var$stepInput","$47d4ff9957288465$var$amountInput","$47d4ff9957288465$var$onCreatePromiseSuccess","position","delay","$parcel$interopDefault","$eWCmQ","Notify","success","$47d4ff9957288465$var$onCreatePromiseError","failure","addEventListener","evt","preventDefault","Number","value","step","amount","timeline","counter","setInterval","$47d4ff9957288465$var$createPromise","then","catch","clearInterval","Promise","resolve","reject","shouldResolve","Math","random","setTimeout"],"version":3,"file":"03-promises.68c23a06.js.map"}