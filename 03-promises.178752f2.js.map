{"mappings":"kjBAGMA,EAAOC,SAASC,cAAc,SAC9BC,EAAaF,SAASC,cAAc,uBACpCE,EAAYH,SAASC,cAAc,sBACnCG,EAAcJ,SAASC,cAAc,wBAuB3C,SAASI,EAAuBC,G,IAAEC,EAAFD,EAAEC,SAAUC,EAAZF,EAAYE,MAC1CC,EAAAC,GAASC,OAAOC,QAAQ,qBAAoCC,OAAfN,EAAS,QAAYM,OAANL,EAAM,M,CAGpE,SAASM,EAAqBR,G,IAAEC,EAAFD,EAAEC,SAAUC,EAAZF,EAAYE,MACxCC,EAAAC,GAASC,OAAOI,QAAQ,oBAAmCF,OAAfN,EAAS,QAAYM,OAANL,EAAM,M,CA1BnET,EAAKiB,iBAAiB,UAEtB,SAAsBC,GACpBA,EAAIC,iBAEJ,IAAIX,EAAW,EACTC,EAAQW,OAAOjB,EAAWkB,OAC1BC,EAAOF,OAAOhB,EAAUiB,OACxBE,EAASH,OAAOf,EAAYgB,OAClC,GAAc,IAAXE,EAAc,OACjB,IAAIC,EAAWf,EAETgB,EAAUC,aAAY,WAC1BC,EAAcnB,EAAUgB,GAAUI,KAAKtB,GAAwBuB,MAAMd,GAClEP,IAAae,GAAQO,cAAcL,GACtCD,GAAYF,EACZd,G,GACCc,E,IAYL,IAAMK,EAAgB,SAACnB,EAAUC,GAC/B,OAAO,IAAIsB,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GAEtCC,YAAW,WACLH,EACFF,EAAQ,CAACxB,WAAUC,UAEnBwB,EAAO,CAACzB,WAAUC,S,GAEnBA,E","sources":["src/js/03-promises.js"],"sourcesContent":["import \"notiflix/dist/notiflix-3.2.5.min.css\";\nimport Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconst delayInput = document.querySelector('input[name=\"delay\"]');\nconst stepInput = document.querySelector('input[name=\"step\"]');\nconst amountInput = document.querySelector('input[name=\"amount\"]');\n\nform.addEventListener('submit', onFormSubmit);\n\nfunction onFormSubmit(evt) {\n  evt.preventDefault();\n\n  let position = 1;\n  const delay = Number(delayInput.value);\n  const step = Number(stepInput.value); \n  const amount = Number(amountInput.value);\n  if(amount === 0) return;\n  let timeline = delay;\n\n  const counter = setInterval(() => {\n    createPromise(position, timeline).then(onCreatePromiseSuccess).catch(onCreatePromiseError);\n    if(position === amount) clearInterval(counter);\n    timeline += step;\n    position++;\n  }, step);\n\n};\n\nfunction onCreatePromiseSuccess({ position, delay }) {\n  Notiflix.Notify.success(`Fulfilled promise ${position} in ${delay}ms`);\n}\n\nfunction onCreatePromiseError({ position, delay }) {\n  Notiflix.Notify.failure(`Rejected promise ${position} in ${delay}ms`);\n}\n\nconst createPromise = (position, delay) => {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n\n    setTimeout(() => {\n      if (shouldResolve) {\n        resolve({position, delay});\n      } else {\n        reject({position, delay});\n      }\n    }, delay)\n  });\n}\n\n\n\n"],"names":["$ce04d3a99e08e73b$var$form","document","querySelector","$ce04d3a99e08e73b$var$delayInput","$ce04d3a99e08e73b$var$stepInput","$ce04d3a99e08e73b$var$amountInput","$ce04d3a99e08e73b$var$onCreatePromiseSuccess","param","position","delay","$parcel$interopDefault","$iU1Pc","Notify","success","concat","$ce04d3a99e08e73b$var$onCreatePromiseError","failure","addEventListener","evt","preventDefault","Number","value","step","amount","timeline","counter","setInterval","$ce04d3a99e08e73b$var$createPromise","then","catch","clearInterval","Promise","resolve","reject","shouldResolve","Math","random","setTimeout"],"version":3,"file":"03-promises.178752f2.js.map"}